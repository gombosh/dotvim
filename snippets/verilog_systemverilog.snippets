# if statement
snippet if
	if (${1}) begin
		${0}
	end
# If/else statements
snippet ife
	if (${1}) begin
		${2}
	end
	else begin
		${1}
	end
# Else if statement
snippet eif
	else if (${1}) begin
		${0}
	end
#Else statement
snippet el
	else begin
		${0}
	end
# While statement
snippet while  while() ..
	while (${1:condition}) begin
	   ${2}
	end

# Repeat Loop
snippet rep
	repeat (${1}) begin
		${0}
	end
# Case statement
snippet case
	case (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# CaseZ statement
snippet casez
	casez (${1:/* variable */})
		${2:/* value */}: begin
			${3}
		end
		default: begin
			${4}
		end
	endcase
# Always block
snippet al
	always @(${1:/* sensitive list */}) begin
		${0}
	end
# Module block
snippet module
	module ${1:module_name} (${2});
		${0}
	endmodule

# Foreach Loop
snippet foreach
	foreach (${1}) begin
		${0}
	end
# Do-while statement
snippet dowh
	do begin
		${0}
	end while (${1});
# Combinational always block
snippet alc
	always_comb begin ${1:: statement_label}
		${0}
	end $1
# Sequential logic
snippet alff
	always_ff @(posedge ${1:clk}) begin ${2:: statement_label}
		${0}
	end $2
# Latched logic
snippet all
	always_latch begin ${1:: statement_label}
		${0}
	end $1
# Class
snippet cl
	class ${1:class_name};
		// data or class properties
		${0}

		// initialization
		function new();
		endfunction : new

	endclass : $1

#fork
snippet fork  fork .. join
	fork
	   begin
	      ${1}
	   end
	   begin
	
	   end
	join
snippet fork  fork .. join_any
	fork
	   begin
	      ${1}
	   end
	   begin
	
	   end
	join_any
snippet fork  fork .. join_none
	fork
	   begin
	      ${1}
	   end
	   begin
	
	   end
	join_none

#function
snippet function  function .. endfunction
	function ${1:void} ${2:function_name} ($3);
	  ${4}
	endfunction: $2

#Interface
snippet interface  interface .. { .. }
	// vmm rule 4-4 -- interfaces shall be packaged into the same files as the
	// transactors that use them
	interface ${1:name_if} (// input wire clk,
			     // input wire reset
			     );
	   timeunit 1ns;
	   timeprecision 100ps;
	
	   ${2}
	   // imports
	   // import pkg::*;
	
	   parameter hold_time = 2;     // timeunit is 1ns
	   parameter setup_time = 2;    // change timing values as per requirement
	
	   // Clocking Blocks
	   // just type clocking and tab to invoke snippet
	
	   // Modports
	   // just type modport and tab to invoke snippet
	
	endinterface: $1
snippet modport  modport .. { .. }
	modport ${1:name_mp}
	  (${2}
	   // clocking clocking_cb,
	   // input input_name,
	   // output output_port,
	   // ....
	   );

# Typedef structure
snippet types
	typedef struct {
		${0}
	} ${1:name_t};

# Program block
snippet prog
	program ${1:program_name} ();
		${0}
	endprogram : $1
# Interface block
snippet intf
	interface ${1:program_name} ();
		// nets
		${0}
		// clocking

		// modports

	endinterface : $1
# Clocking Block
snippet clocking
	clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
		${0}
	endclocking : $1

snippet clocking  clocking .. { .. }
	clocking ${1:name_cb} @(posedge ${2:clock});
	   default input #${3:setup_time} output #${4:hold_time};
	   ${5}
	   // output declarations
	   // input declarations
	endclocking: $1

# Covergroup construct
snippet covergroup
	covergroup ${1:group_name} @(${2:posedge} ${3:clk});
		${0}
	endgroup : $1
# Package declaration
snippet package
	package ${1:package_name};
		${0}
	endpackage : $1

#Import guard
snippet once  `ifndef XXX; `define XXX; `endif
	\`ifndef ${1:`toupper('_'.substitute(expand('%:t'), '\.', '_', '').'_')`}
	\`define $1
	
	${2}
	
	\`endif //ifndef $1

#UVM
snippet create uvm create component ..
	${1:local_name} = ${2:class_name}::type_id::create("$1",this);

snippet uvm_info uvm LOW massage ..
	`uvm_info("${1:MY_NAME}", ${2:$sformatf("%m")}, UVM_LOW);

snippet uvm_info uvm MEDIUM massage ..
	`uvm_info("${1:MY_NAME}", ${2:$sformatf("%m")}, UVM_MEDIUM);

snippet uvm_info uvm HIGH massage ..
	`uvm_info("${1:MY_NAME}", ${2:$sformatf("%m")}, UVM_HIGH);

snippet uvm_info uvm FULL massage ..
	`uvm_info("${1:MY_NAME}", ${2:$sformatf("%m")}, UVM_FULL);

snippet uvm_info uvm DEBUG massage ..
	`uvm_info("${1:MY_NAME}", ${2:$sformatf("%m")}, UVM_DEBUG);

snippet uvm  UVM Agent
	class ${1:uvc_name}_agent extends uvm_agent;
	   ${3}
	   uvm_active_passive_enum is_active;
	   $1_sequencer sequencer;
	   $1_driver driver;
	   $1_monitor monitor;
	
	   \`uvm_component_utils_begin($1_agent)
	      \`uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      monitor=$1_monitor::type_id::create("monitor", this);
	      if (is_active == UVM_ACTIVE) begin
		 driver=$1_driver::type_id::create("driver", this);
		 sequencer=$1_sequencer::type_id::create("sequencer", this);
	      end
	   endfunction: build
	
	   virtual function void connect();
	      if (is_active == UVM_ACTIVE) begin
		 driver.seq_item_port.connect(sequencer.seq_item_export);
	      end
	   endfunction: connect
	
	   virtual function void assign_vif(virtual interface ${2:uvc_if} vif);
	      monitor.vif = vif;
	      if (is_active == UVM_ACTIVE) begin
		 driver.vif=vif;
	      end
	   endfunction: assign_vif
	
	endclass: $1_agent
snippet uvm_agent  UVM Agent
	class ${1:uvc_name}_agent extends uvm_agent;
	   ${3}
	   uvm_active_passive_enum is_active;
	   $1_sequencer sequencer;
	   $1_driver driver;
	   $1_monitor monitor;
	
	   \`uvm_component_utils_begin($1_agent)
	      \`uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      monitor=$1_monitor::type_id::create("monitor", this);
	      if (is_active == UVM_ACTIVE) begin
		 driver=$1_driver::type_id::create("driver", this);
		 sequencer=$1_sequencer::type_id::create("sequencer", this);
	      end
	   endfunction: build
	
	   virtual function void connect();
	      if (is_active == UVM_ACTIVE) begin
		 driver.seq_item_port.connect(sequencer.seq_item_export);
	      end
	   endfunction: connect
	
	   virtual function void assign_vif(virtual interface ${2:uvc_if} vif);
	      monitor.vif = vif;
	      if (is_active == UVM_ACTIVE) begin
		 driver.vif=vif;
	      end
	   endfunction: assign_vif
	
	endclass: $1_agent
snippet uvmagent  UVM Agent
	class ${1:uvc_name}_agent extends uvm_agent;
	   ${3}
	   uvm_active_passive_enum is_active;
	   $1_sequencer sequencer;
	   $1_driver driver;
	   $1_monitor monitor;
	
	   \`uvm_component_utils_begin($1_agent)
	      \`uvm_field_enum(uvm_active_passive_enum, is_active, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      monitor=$1_monitor::type_id::create("monitor", this);
	      if (is_active == UVM_ACTIVE) begin
		 driver=$1_driver::type_id::create("driver", this);
		 sequencer=$1_sequencer::type_id::create("sequencer", this);
	      end
	   endfunction: build
	
	   virtual function void connect();
	      if (is_active == UVM_ACTIVE) begin
		 driver.seq_item_port.connect(sequencer.seq_item_export);
	      end
	   endfunction: connect
	
	   virtual function void assign_vif(virtual interface ${2:uvc_if} vif);
	      monitor.vif = vif;
	      if (is_active == UVM_ACTIVE) begin
		 driver.vif=vif;
	      end
	   endfunction: assign_vif
	
	endclass: $1_agent
snippet uvm  UVM Data Item
	class ${1:uvc_item} extends uvm_sequence_item;
	   ${2}
	   /* AUTO_UVM_VARS */
	   rand bit [3:0] addr;
	   rand bit [5:0] length;
	   rand bit [7:0] payload [];
	   
	   \`uvm_object_utils_begin(yapp_pkt)
	      \`uvm_field_int(addr, UVM_ALL_ON)
	      \`uvm_field_int(length, UVM_ALL_ON)
	      \`uvm_field_array_int(payload, UVM_ALL_ON)
	   \`uvm_object_utils_end
	
	   function new(string name="$1");
	      super.new(name);
	   endfunction: new
	
	endclass: $1
snippet uvm_sequence_item  UVM Data Item
	class ${1:uvc_item} extends uvm_sequence_item;
	   ${2}
	   /* AUTO_UVM_VARS */
	   rand bit [3:0] addr;
	   rand bit [5:0] length;
	   rand bit [7:0] payload [];
	   
	   \`uvm_object_utils_begin(yapp_pkt)
	      \`uvm_field_int(addr, UVM_ALL_ON)
	      \`uvm_field_int(length, UVM_ALL_ON)
	      \`uvm_field_array_int(payload, UVM_ALL_ON)
	   \`uvm_object_utils_end
	
	   function new(string name="$1");
	      super.new(name);
	   endfunction: new
	
	endclass: $1
snippet uvm_data  UVM Data Item
	class ${1:uvc_item} extends uvm_sequence_item;
	   ${2}
	   /* AUTO_UVM_VARS */
	   rand bit [3:0] addr;
	   rand bit [5:0] length;
	   rand bit [7:0] payload [];
	   
	   \`uvm_object_utils_begin(yapp_pkt)
	      \`uvm_field_int(addr, UVM_ALL_ON)
	      \`uvm_field_int(length, UVM_ALL_ON)
	      \`uvm_field_array_int(payload, UVM_ALL_ON)
	   \`uvm_object_utils_end
	
	   function new(string name="$1");
	      super.new(name);
	   endfunction: new
	
	endclass: $1
snippet uvm_data_item  UVM Data Item
	class ${1:uvc_item} extends uvm_sequence_item;
	   ${2}
	   /* AUTO_UVM_VARS */
	   rand bit [3:0] addr;
	   rand bit [5:0] length;
	   rand bit [7:0] payload [];
	   
	   \`uvm_object_utils_begin(yapp_pkt)
	      \`uvm_field_int(addr, UVM_ALL_ON)
	      \`uvm_field_int(length, UVM_ALL_ON)
	      \`uvm_field_array_int(payload, UVM_ALL_ON)
	   \`uvm_object_utils_end
	
	   function new(string name="$1");
	      super.new(name);
	   endfunction: new
	
	endclass: $1
snippet uvm_item  UVM Data Item
	class ${1:uvc_item} extends uvm_sequence_item;
	   ${2}
	   /* AUTO_UVM_VARS */
	   rand bit [3:0] addr;
	   rand bit [5:0] length;
	   rand bit [7:0] payload [];
	   
	   \`uvm_object_utils_begin(yapp_pkt)
	      \`uvm_field_int(addr, UVM_ALL_ON)
	      \`uvm_field_int(length, UVM_ALL_ON)
	      \`uvm_field_array_int(payload, UVM_ALL_ON)
	   \`uvm_object_utils_end
	
	   function new(string name="$1");
	      super.new(name);
	   endfunction: new
	
	endclass: $1
snippet uvm  UVM Driver
	class ${1:uvc_name}_driver extends uvm_driver #(${2:uvc_item});
	   ${4}
	   string tID;
	   virtual interface ${3:uvc_if} vif;
	   $2 item;
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   \`uvm_component_utils_begin($1_driver)
	      \`uvm_field_object(item, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task get_and_drive();
	      forever
		begin
		   // wait(vif.reset==0);  // block until reset released
		   seq_item_port.get_next_item(item);
		   send_to_dut(item);
		   seq_item_port.item_done();
		end
	   endtask: get_and_drive
	
	   task send_to_dut(input $2 item);
	      uvm_report_info(tID, $psprintf("%s : item sent is %0s",
					     tID, item.sprint()), UVM_FULL);
	      // Send data to DUT (BFM - fill in your BFM code here)
	      #10 ;
	      #10 ;
	   endtask: send_to_dut
	
	   task reset_dut();
	      // fill in any reset code here
	   endtask: reset_dut
	
	   task run();
	      uvm_report_info(tID, $psprintf(" %s : running", tID), UVM_MEDIUM);
	      // reset_dut(); // fill in 'reset_dut()' if needed
	      get_and_drive();
	   endtask: run
	
	   virtual function void report();
	      // fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	endclass: $1_driver
snippet uvm_driver  UVM Driver
	class ${1:uvc_name}_driver extends uvm_driver #(${2:uvc_item});
	   ${4}
	   string tID;
	   virtual interface ${3:uvc_if} vif;
	   $2 item;
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   \`uvm_component_utils_begin($1_driver)
	      \`uvm_field_object(item, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task get_and_drive();
	      forever
		begin
		   // wait(vif.reset==0);  // block until reset released
		   seq_item_port.get_next_item(item);
		   send_to_dut(item);
		   seq_item_port.item_done();
		end
	   endtask: get_and_drive
	
	   task send_to_dut(input $2 item);
	      uvm_report_info(tID, $psprintf("%s : item sent is %0s",
					     tID, item.sprint()), UVM_FULL);
	      // Send data to DUT (BFM - fill in your BFM code here)
	      #10 ;
	      #10 ;
	   endtask: send_to_dut
	
	   task reset_dut();
	      // fill in any reset code here
	   endtask: reset_dut
	
	   task run();
	      uvm_report_info(tID, $psprintf(" %s : running", tID), UVM_MEDIUM);
	      // reset_dut(); // fill in 'reset_dut()' if needed
	      get_and_drive();
	   endtask: run
	
	   virtual function void report();
	      // fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	endclass: $1_driver
snippet uvmdriver  UVM Driver
	class ${1:uvc_name}_driver extends uvm_driver #(${2:uvc_item});
	   ${4}
	   string tID;
	   virtual interface ${3:uvc_if} vif;
	   $2 item;
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   \`uvm_component_utils_begin($1_driver)
	      \`uvm_field_object(item, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task get_and_drive();
	      forever
		begin
		   // wait(vif.reset==0);  // block until reset released
		   seq_item_port.get_next_item(item);
		   send_to_dut(item);
		   seq_item_port.item_done();
		end
	   endtask: get_and_drive
	
	   task send_to_dut(input $2 item);
	      uvm_report_info(tID, $psprintf("%s : item sent is %0s",
					     tID, item.sprint()), UVM_FULL);
	      // Send data to DUT (BFM - fill in your BFM code here)
	      #10 ;
	      #10 ;
	   endtask: send_to_dut
	
	   task reset_dut();
	      // fill in any reset code here
	   endtask: reset_dut
	
	   task run();
	      uvm_report_info(tID, $psprintf(" %s : running", tID), UVM_MEDIUM);
	      // reset_dut(); // fill in 'reset_dut()' if needed
	      get_and_drive();
	   endtask: run
	
	   virtual function void report();
	      // fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	endclass: $1_driver
snippet uvm  UVM Env
	class ${1:uvc_name}_env extends uvm_env;
	   ${2}
	   $1_agent agent0;
	   \`uvm_component_utils($1_env)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      agent0 = $1_agent::type_id::create("agent0", this);
	   endfunction: build
	
	endclass: $1_env
snippet uvm_env  UVM Env
	class ${1:uvc_name}_env extends uvm_env;
	   ${2}
	   $1_agent agent0;
	   \`uvm_component_utils($1_env)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      agent0 = $1_agent::type_id::create("agent0", this);
	   endfunction: build
	
	endclass: $1_env
snippet uvmenv  UVM Env
	class ${1:uvc_name}_env extends uvm_env;
	   ${2}
	   $1_agent agent0;
	   \`uvm_component_utils($1_env)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      agent0 = $1_agent::type_id::create("agent0", this);
	   endfunction: build
	
	endclass: $1_env
snippet uvm  UVM Interface
	interface $1(input logic clock, input logic reset);
	
	   // ToDo: Declare the interface signals corresponding to the ports
	   ${2}
	   wire [7:0] sync_tx;
	   wire [7:0] sync_rx;
	
	   logic async_sig;
	   
	   // ToDo: Define clocking blocks
	   // -- use the 'clocking' snippet
	   
	   // ToDo: Define a modport for each interface perspective
	   // -- use the 'modport' snippet
	
	endinterface: $1
snippet interface  UVM Interface
	interface $1(input logic clock, input logic reset);
	
	   // ToDo: Declare the interface signals corresponding to the ports
	   ${2}
	   wire [7:0] sync_tx;
	   wire [7:0] sync_rx;
	
	   logic async_sig;
	   
	   // ToDo: Define clocking blocks
	   // -- use the 'clocking' snippet
	   
	   // ToDo: Define a modport for each interface perspective
	   // -- use the 'modport' snippet
	
	endinterface: $1
snippet uvm  UVM Monitor
	class ${1:uvc_name}_monitor extends uvm_monitor;
	   ${4}
	   string tID;
	   virtual interface ${2:uvc_if} vif;
	   ${3:uvc_item} trans;
	   event e_trans_collected; // event to signal transaction collected
	   // TLM port for scoreboard communication
	   //  (implement scoreboard write method if needed)
	   uvm_analysis_port #($3) sb_post;
	
	   \`uvm_component_utils_begin($1_monitor)
	      \`uvm_field_object(trans, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task collect_data();
	      forever begin
		 //put code to collect bus transactions here
		 #10 ;
	
		 #10 ;
	
		 ->e_trans_collected; //signal transaction collection complete
		 //post good transactions to scoreboard if enabled
		 if (sb_post.size() > 0)
		   sb_post.write(trans);
	      end;
	   endtask: collect_data
	
	   // to FIX stuff for covergroup
	   /*
	    //shell code for covergroup
	    covergroup cov_trans @ e_trans_collected;
	    cg1: coverpoint trans..$fields[2].
	    { bins MIN[]     = {0};
	    bins MAX[]     = {63};
	    }
	endgroup
	    */
	
	   task run();
	      \`message(UVM_MEDIUM, ("$1_monitor: running"))
	      uvm_report_info(tID, $psprintf("%s: running", tID), UVM_MEDIUM);
	      collect_data();
	   endtask: run
	
	   virtual function void report();
	      //fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	
	   //new() function needs to be listed last so other items defined
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	      // to FIX stuff for covergroup
	      /*
	       cov_trans = new();
	       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
	       */
	      trans = new();
	      sb_post = new("sb_post", this);
	   endfunction: new
	
	endclass: $1_monitor
snippet uvm_monitor  UVM Monitor
	class ${1:uvc_name}_monitor extends uvm_monitor;
	   ${4}
	   string tID;
	   virtual interface ${2:uvc_if} vif;
	   ${3:uvc_item} trans;
	   event e_trans_collected; // event to signal transaction collected
	   // TLM port for scoreboard communication
	   //  (implement scoreboard write method if needed)
	   uvm_analysis_port #($3) sb_post;
	
	   \`uvm_component_utils_begin($1_monitor)
	      \`uvm_field_object(trans, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task collect_data();
	      forever begin
		 //put code to collect bus transactions here
		 #10 ;
	
		 #10 ;
	
		 ->e_trans_collected; //signal transaction collection complete
		 //post good transactions to scoreboard if enabled
		 if (sb_post.size() > 0)
		   sb_post.write(trans);
	      end;
	   endtask: collect_data
	
	   // to FIX stuff for covergroup
	   /*
	    //shell code for covergroup
	    covergroup cov_trans @ e_trans_collected;
	    cg1: coverpoint trans..$fields[2].
	    { bins MIN[]     = {0};
	    bins MAX[]     = {63};
	    }
	endgroup
	    */
	
	   task run();
	      \`message(UVM_MEDIUM, ("$1_monitor: running"))
	      uvm_report_info(tID, $psprintf("%s: running", tID), UVM_MEDIUM);
	      collect_data();
	   endtask: run
	
	   virtual function void report();
	      //fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	
	   //new() function needs to be listed last so other items defined
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	      // to FIX stuff for covergroup
	      /*
	       cov_trans = new();
	       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
	       */
	      trans = new();
	      sb_post = new("sb_post", this);
	   endfunction: new
	
	endclass: $1_monitor
snippet uvm_mon  UVM Monitor
	class ${1:uvc_name}_monitor extends uvm_monitor;
	   ${4}
	   string tID;
	   virtual interface ${2:uvc_if} vif;
	   ${3:uvc_item} trans;
	   event e_trans_collected; // event to signal transaction collected
	   // TLM port for scoreboard communication
	   //  (implement scoreboard write method if needed)
	   uvm_analysis_port #($3) sb_post;
	
	   \`uvm_component_utils_begin($1_monitor)
	      \`uvm_field_object(trans, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task collect_data();
	      forever begin
		 //put code to collect bus transactions here
		 #10 ;
	
		 #10 ;
	
		 ->e_trans_collected; //signal transaction collection complete
		 //post good transactions to scoreboard if enabled
		 if (sb_post.size() > 0)
		   sb_post.write(trans);
	      end;
	   endtask: collect_data
	
	   // to FIX stuff for covergroup
	   /*
	    //shell code for covergroup
	    covergroup cov_trans @ e_trans_collected;
	    cg1: coverpoint trans..$fields[2].
	    { bins MIN[]     = {0};
	    bins MAX[]     = {63};
	    }
	endgroup
	    */
	
	   task run();
	      \`message(UVM_MEDIUM, ("$1_monitor: running"))
	      uvm_report_info(tID, $psprintf("%s: running", tID), UVM_MEDIUM);
	      collect_data();
	   endtask: run
	
	   virtual function void report();
	      //fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	
	   //new() function needs to be listed last so other items defined
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	      // to FIX stuff for covergroup
	      /*
	       cov_trans = new();
	       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
	       */
	      trans = new();
	      sb_post = new("sb_post", this);
	   endfunction: new
	
	endclass: $1_monitor
snippet uvmmon  UVM Monitor
	class ${1:uvc_name}_monitor extends uvm_monitor;
	   ${4}
	   string tID;
	   virtual interface ${2:uvc_if} vif;
	   ${3:uvc_item} trans;
	   event e_trans_collected; // event to signal transaction collected
	   // TLM port for scoreboard communication
	   //  (implement scoreboard write method if needed)
	   uvm_analysis_port #($3) sb_post;
	
	   \`uvm_component_utils_begin($1_monitor)
	      \`uvm_field_object(trans, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task collect_data();
	      forever begin
		 //put code to collect bus transactions here
		 #10 ;
	
		 #10 ;
	
		 ->e_trans_collected; //signal transaction collection complete
		 //post good transactions to scoreboard if enabled
		 if (sb_post.size() > 0)
		   sb_post.write(trans);
	      end;
	   endtask: collect_data
	
	   // to FIX stuff for covergroup
	   /*
	    //shell code for covergroup
	    covergroup cov_trans @ e_trans_collected;
	    cg1: coverpoint trans..$fields[2].
	    { bins MIN[]     = {0};
	    bins MAX[]     = {63};
	    }
	endgroup
	    */
	
	   task run();
	      \`message(UVM_MEDIUM, ("$1_monitor: running"))
	      uvm_report_info(tID, $psprintf("%s: running", tID), UVM_MEDIUM);
	      collect_data();
	   endtask: run
	
	   virtual function void report();
	      //fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	
	   //new() function needs to be listed last so other items defined
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	      // to FIX stuff for covergroup
	      /*
	       cov_trans = new();
	       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
	       */
	      trans = new();
	      sb_post = new("sb_post", this);
	   endfunction: new
	
	endclass: $1_monitor
snippet uvmmonitor  UVM Monitor
	class ${1:uvc_name}_monitor extends uvm_monitor;
	   ${4}
	   string tID;
	   virtual interface ${2:uvc_if} vif;
	   ${3:uvc_item} trans;
	   event e_trans_collected; // event to signal transaction collected
	   // TLM port for scoreboard communication
	   //  (implement scoreboard write method if needed)
	   uvm_analysis_port #($3) sb_post;
	
	   \`uvm_component_utils_begin($1_monitor)
	      \`uvm_field_object(trans, UVM_ALL_ON)
	   \`uvm_component_utils_end
	
	   task collect_data();
	      forever begin
		 //put code to collect bus transactions here
		 #10 ;
	
		 #10 ;
	
		 ->e_trans_collected; //signal transaction collection complete
		 //post good transactions to scoreboard if enabled
		 if (sb_post.size() > 0)
		   sb_post.write(trans);
	      end;
	   endtask: collect_data
	
	   // to FIX stuff for covergroup
	   /*
	    //shell code for covergroup
	    covergroup cov_trans @ e_trans_collected;
	    cg1: coverpoint trans..$fields[2].
	    { bins MIN[]     = {0};
	    bins MAX[]     = {63};
	    }
	endgroup
	    */
	
	   task run();
	      \`message(UVM_MEDIUM, ("$1_monitor: running"))
	      uvm_report_info(tID, $psprintf("%s: running", tID), UVM_MEDIUM);
	      collect_data();
	   endtask: run
	
	   virtual function void report();
	      //fill in any reporting code if needed
	      logic dummy;
	   endfunction: report
	
	   //new() function needs to be listed last so other items defined
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      tID = get_type_name();
	      tID = tID.toupper();
	      // to FIX stuff for covergroup
	      /*
	       cov_trans = new();
	       cov_trans.set_inst_name({get_full_name(), ".cov_trans"});
	       */
	      trans = new();
	      sb_post = new("sb_post", this);
	   endfunction: new
	
	endclass: $1_monitor
snippet uvm  UVM Seq Lib
	class ${1:uvc_name}_seq1 extends uvm_sequence #(${2:uvc_item});
	   ${3}
	   string tID;
	   \`uvm_sequence_utils($1_seq1, $1_sequencer)
	   // $2 trans;
	   // "req" built-in uvm_sequence class member for sequence_item
	   rand int delay1;
	   rand int delay2;
	   constraint d1 {delay1 > 55; delay1 < 125;}
	   constraint d2 {delay2 > 25; delay2 < 45;}
	
	   function new(string name = "$1_seq1");
	      super.new(name);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   task body();
	      \`message(UVM_LOW, ("RUNNING sequence: %s", get_name()))
	      uvm_report_info(tID, $psprintf("%s: sequence Running", tID), UVM_LOW);
	      // not the best way to print, just to confirm randomization
	      \`message(UVM_LOW, ("delay1=%0d, delay2=%0d", delay1, delay2))
	      uvm_report_info(tID, $psprintf("%s: delay1=%0d, delay2=%0d",
					     tID, delay1, delay2), UVM_MEDIUM);
	      #delay1
		// dummy delay to illustrate a sequence rand variable
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay2
		// get_response(rsp); // get response if implemented
	      \`message(UVM_LOW, ("sequence: %s complete", get_name()))
	      uvm_report_info(tID, $psprintf("sequence: %s complete", tID), UVM_LOW);
	   endtask: body
	
	endclass: $1_seq1
	
	//additional sequences can be included in this file
snippet uvm_seq_lib  UVM Seq Lib
	class ${1:uvc_name}_seq1 extends uvm_sequence #(${2:uvc_item});
	   ${3}
	   string tID;
	   \`uvm_sequence_utils($1_seq1, $1_sequencer)
	   // $2 trans;
	   // "req" built-in uvm_sequence class member for sequence_item
	   rand int delay1;
	   rand int delay2;
	   constraint d1 {delay1 > 55; delay1 < 125;}
	   constraint d2 {delay2 > 25; delay2 < 45;}
	
	   function new(string name = "$1_seq1");
	      super.new(name);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   task body();
	      \`message(UVM_LOW, ("RUNNING sequence: %s", get_name()))
	      uvm_report_info(tID, $psprintf("%s: sequence Running", tID), UVM_LOW);
	      // not the best way to print, just to confirm randomization
	      \`message(UVM_LOW, ("delay1=%0d, delay2=%0d", delay1, delay2))
	      uvm_report_info(tID, $psprintf("%s: delay1=%0d, delay2=%0d",
					     tID, delay1, delay2), UVM_MEDIUM);
	      #delay1
		// dummy delay to illustrate a sequence rand variable
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay2
		// get_response(rsp); // get response if implemented
	      \`message(UVM_LOW, ("sequence: %s complete", get_name()))
	      uvm_report_info(tID, $psprintf("sequence: %s complete", tID), UVM_LOW);
	   endtask: body
	
	endclass: $1_seq1
	
	//additional sequences can be included in this file
snippet uvm_seqlib  UVM Seq Lib
	class ${1:uvc_name}_seq1 extends uvm_sequence #(${2:uvc_item});
	   ${3}
	   string tID;
	   \`uvm_sequence_utils($1_seq1, $1_sequencer)
	   // $2 trans;
	   // "req" built-in uvm_sequence class member for sequence_item
	   rand int delay1;
	   rand int delay2;
	   constraint d1 {delay1 > 55; delay1 < 125;}
	   constraint d2 {delay2 > 25; delay2 < 45;}
	
	   function new(string name = "$1_seq1");
	      super.new(name);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   task body();
	      \`message(UVM_LOW, ("RUNNING sequence: %s", get_name()))
	      uvm_report_info(tID, $psprintf("%s: sequence Running", tID), UVM_LOW);
	      // not the best way to print, just to confirm randomization
	      \`message(UVM_LOW, ("delay1=%0d, delay2=%0d", delay1, delay2))
	      uvm_report_info(tID, $psprintf("%s: delay1=%0d, delay2=%0d",
					     tID, delay1, delay2), UVM_MEDIUM);
	      #delay1
		// dummy delay to illustrate a sequence rand variable
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay2
		// get_response(rsp); // get response if implemented
	      \`message(UVM_LOW, ("sequence: %s complete", get_name()))
	      uvm_report_info(tID, $psprintf("sequence: %s complete", tID), UVM_LOW);
	   endtask: body
	
	endclass: $1_seq1
	
	//additional sequences can be included in this file
snippet uvmseqlib  UVM Seq Lib
	class ${1:uvc_name}_seq1 extends uvm_sequence #(${2:uvc_item});
	   ${3}
	   string tID;
	   \`uvm_sequence_utils($1_seq1, $1_sequencer)
	   // $2 trans;
	   // "req" built-in uvm_sequence class member for sequence_item
	   rand int delay1;
	   rand int delay2;
	   constraint d1 {delay1 > 55; delay1 < 125;}
	   constraint d2 {delay2 > 25; delay2 < 45;}
	
	   function new(string name = "$1_seq1");
	      super.new(name);
	      tID = get_type_name();
	      tID = tID.toupper();
	   endfunction: new
	
	   task body();
	      \`message(UVM_LOW, ("RUNNING sequence: %s", get_name()))
	      uvm_report_info(tID, $psprintf("%s: sequence Running", tID), UVM_LOW);
	      // not the best way to print, just to confirm randomization
	      \`message(UVM_LOW, ("delay1=%0d, delay2=%0d", delay1, delay2))
	      uvm_report_info(tID, $psprintf("%s: delay1=%0d, delay2=%0d",
					     tID, delay1, delay2), UVM_MEDIUM);
	      #delay1
		// dummy delay to illustrate a sequence rand variable
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay1
		// get_response(rsp); // get response if implemented
	      \`uvm_do(req) // this line sends the transaction
	      #delay2
		// get_response(rsp); // get response if implemented
	      \`message(UVM_LOW, ("sequence: %s complete", get_name()))
	      uvm_report_info(tID, $psprintf("sequence: %s complete", tID), UVM_LOW);
	   endtask: body
	
	endclass: $1_seq1
	
	//additional sequences can be included in this file
snippet uvm  UVM Sequencer
	class ${1:uvc_name}_sequencer extends uvm_sequencer #(${2:uvc_item});
	   ${3}
	   \`uvm_sequencer_utils($1_sequencer)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      \`uvm_update_sequence_lib_and_item($2)
	   endfunction: new
	
	endclass: $1_sequencer
snippet uvm_sequencer  UVM Sequencer
	class ${1:uvc_name}_sequencer extends uvm_sequencer #(${2:uvc_item});
	   ${3}
	   \`uvm_sequencer_utils($1_sequencer)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      \`uvm_update_sequence_lib_and_item($2)
	   endfunction: new
	
	endclass: $1_sequencer
snippet uvmsequencer  UVM Sequencer
	class ${1:uvc_name}_sequencer extends uvm_sequencer #(${2:uvc_item});
	   ${3}
	   \`uvm_sequencer_utils($1_sequencer)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	      \`uvm_update_sequence_lib_and_item($2)
	   endfunction: new
	
	endclass: $1_sequencer
snippet uvm  UVM Sve
	class sve extends uvm_env;
	   ${2}
	   ${1:uvc_name}_env env0;
	   \`uvm_component_utils(sve)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      env0 = $1_env::type_id::create("env0", this);
	   endfunction: build
	
	   virtual function void connect();
	      env0.agent0.assign_vif(top.if0);
	   endfunction: connect
	endclass: sve
snippet uvm_sve  UVM Sve
	class sve extends uvm_env;
	   ${2}
	   ${1:uvc_name}_env env0;
	   \`uvm_component_utils(sve)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      env0 = $1_env::type_id::create("env0", this);
	   endfunction: build
	
	   virtual function void connect();
	      env0.agent0.assign_vif(top.if0);
	   endfunction: connect
	endclass: sve
snippet uvmsve  UVM Sve
	class sve extends uvm_env;
	   ${2}
	   ${1:uvc_name}_env env0;
	   \`uvm_component_utils(sve)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      env0 = $1_env::type_id::create("env0", this);
	   endfunction: build
	
	   virtual function void connect();
	      env0.agent0.assign_vif(top.if0);
	   endfunction: connect
	endclass: sve
snippet uvm  UVM Test
	class test1 extends uvm_test;
	   ${2}
	   sve sve0;
	   \`uvm_component_utils(test1)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      set_config_int("sve0.env0.agent0.sequencer", "count", 2);
	      set_config_int("sve0.env0.agent0", "is_active", UVM_ACTIVE);
	      set_config_string("sve0.env0.agent0.sequencer",
				"default_sequence", "${1:uvc_name}_seq1");
	      sve0 = sve::type_id::create("sve0", this);
	   endfunction: build
	
	   task run();
	      \`message(UVM_LOW, ("test1 running..."))
	      uvm_top.print_topology();
	      #10000
		//delay is simple "end of test" mechanism
		//use objections in sequences for better "end of test" detection
		\`message(UVM_LOW, ("User activated end of simulation"))
	      global_stop_request();
	   endtask: run
	
	endclass: test1
snippet uvm_test  UVM Test
	class test1 extends uvm_test;
	   ${2}
	   sve sve0;
	   \`uvm_component_utils(test1)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      set_config_int("sve0.env0.agent0.sequencer", "count", 2);
	      set_config_int("sve0.env0.agent0", "is_active", UVM_ACTIVE);
	      set_config_string("sve0.env0.agent0.sequencer",
				"default_sequence", "${1:uvc_name}_seq1");
	      sve0 = sve::type_id::create("sve0", this);
	   endfunction: build
	
	   task run();
	      \`message(UVM_LOW, ("test1 running..."))
	      uvm_top.print_topology();
	      #10000
		//delay is simple "end of test" mechanism
		//use objections in sequences for better "end of test" detection
		\`message(UVM_LOW, ("User activated end of simulation"))
	      global_stop_request();
	   endtask: run
	
	endclass: test1
snippet uvmtest  UVM Test
	class test1 extends uvm_test;
	   ${2}
	   sve sve0;
	   \`uvm_component_utils(test1)
	
	   function new(string name, uvm_component parent);
	      super.new(name, parent);
	   endfunction: new
	
	   virtual function void build();
	      super.build();
	      set_config_int("sve0.env0.agent0.sequencer", "count", 2);
	      set_config_int("sve0.env0.agent0", "is_active", UVM_ACTIVE);
	      set_config_string("sve0.env0.agent0.sequencer",
				"default_sequence", "${1:uvc_name}_seq1");
	      sve0 = sve::type_id::create("sve0", this);
	   endfunction: build
	
	   task run();
	      \`message(UVM_LOW, ("test1 running..."))
	      uvm_top.print_topology();
	      #10000
		//delay is simple "end of test" mechanism
		//use objections in sequences for better "end of test" detection
		\`message(UVM_LOW, ("User activated end of simulation"))
	      global_stop_request();
	   endtask: run
	
	endclass: test1
snippet uvm  UVM Top
	\`include "uvm.svh"
	\`include "${1:uvc_name}_inc.svh"
	\`include "sve.sv"
	\`include "test1.sv"
	module top();
	   ${3}
	   logic clock;
	   logic reset;
	
	   ${2:uvc_if} if0(clock, reset); // instantiate uvc interface
	
	   initial
	     begin
		run_test();
	     end
	
	   always #10 clock = ~clock;
	
	   initial
	     begin
		clock = 0;
		reset = 1; // active high reset for this example
		#75 reset = 0;
	     end
	
	   // instantiate and connect dut to interface(s) here
	
	endmodule: top
snippet uvm_top  UVM Top
	\`include "uvm.svh"
	\`include "${1:uvc_name}_inc.svh"
	\`include "sve.sv"
	\`include "test1.sv"
	module top();
	   ${3}
	   logic clock;
	   logic reset;
	
	   ${2:uvc_if} if0(clock, reset); // instantiate uvc interface
	
	   initial
	     begin
		run_test();
	     end
	
	   always #10 clock = ~clock;
	
	   initial
	     begin
		clock = 0;
		reset = 1; // active high reset for this example
		#75 reset = 0;
	     end
	
	   // instantiate and connect dut to interface(s) here
	
	endmodule: top
snippet uvmtop  UVM Top
	\`include "uvm.svh"
	\`include "${1:uvc_name}_inc.svh"
	\`include "sve.sv"
	\`include "test1.sv"
	module top();
	   ${3}
	   logic clock;
	   logic reset;
	
	   ${2:uvc_if} if0(clock, reset); // instantiate uvc interface
	
	   initial
	     begin
		run_test();
	     end
	
	   always #10 clock = ~clock;
	
	   initial
	     begin
		clock = 0;
		reset = 1; // active high reset for this example
		#75 reset = 0;
	     end
	
	   // instantiate and connect dut to interface(s) here
	
	endmodule: top
